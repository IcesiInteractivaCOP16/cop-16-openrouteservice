name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up SSH key
      run: |
        # Create the .ssh directory if it doesn't exist
        mkdir -p ~/.ssh
        
        # Store the PEM key in a temporary file
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/openrouteservice_pem.pem
        chmod 600 ~/.ssh/openrouteservice_pem.pem
    - name: Add SSH known hosts
      run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Copy files to EC2 and run verification and cleanup script
      run: |
        # Variables
        EC2_USER=${{ secrets.EC2_USER }}  # Change if needed
        EC2_HOST=${{ secrets.EC2_HOST }}  # EC2 IP or DNS
        PEM_FILE=~/.ssh/openrouteservice_pem.pem  # Path to PEM file
        # Create the app directory on the EC2 instance
        ssh -i $PEM_FILE $EC2_USER@$EC2_HOST "mkdir -p /home/$EC2_USER/app"
        # Copy files to EC2, including the script and docker-compose file
        # Check if the ors-docker directory exists and has content
        if ssh -i $PEM_FILE $EC2_USER@$EC2_HOST "[ -d /home/$EC2_USER/app/ors-docker ] && [ \"\$(ls -A /home/$EC2_USER/app/ors-docker)\" ]"; then
          echo "ors-docker directory exists and is not empty. Checking for differences in osm_file."
          # Check for differences in osm_file and update if necessary
          LOCAL_OSM_FILE="./ors-docker/osm_file"
          REMOTE_OSM_FILE="/home/$EC2_USER/app/ors-docker/osm_file"
          if ssh -i $PEM_FILE $EC2_USER@$EC2_HOST "[ -f $REMOTE_OSM_FILE ]"; then
            DIFF=$(ssh -i $PEM_FILE $EC2_USER@$EC2_HOST "diff $REMOTE_OSM_FILE <(cat $LOCAL_OSM_FILE)")
            if [ -n "$DIFF" ]; then
              echo "osm_file differs. Updating remote osm_file."
              scp -i $PEM_FILE $LOCAL_OSM_FILE $EC2_USER@$EC2_HOST:$REMOTE_OSM_FILE
            else
              echo "osm_file is up to date."
            fi
          else
            echo "osm_file does not exist on remote. Copying osm_file."
            scp -i $PEM_FILE $LOCAL_OSM_FILE $EC2_USER@$EC2_HOST:$REMOTE_OSM_FILE
          fi
        else
          echo "ors-docker directory does not exist or is empty. Copying entire directory."
          scp -i $PEM_FILE -r ./ors-docker $EC2_USER@$EC2_HOST:/home/$EC2_USER/app/
        fi

        # Always copy docker-compose.yml and verify_and_cleanup.sh
        scp -i $PEM_FILE -r ./docker-compose.yml $EC2_USER@$EC2_HOST:/home/$EC2_USER/app/
        scp -i $PEM_FILE -r ./verify_and_cleanup.sh $EC2_USER@$EC2_HOST:/home/$EC2_USER/app/
        # Connect and run the verification and cleanup script
        ssh -i $PEM_FILE $EC2_USER@$EC2_HOST << 'EOF'
          APP_DIR="/home/ubuntu/app"
          if [ ! -d "$APP_DIR" ]; then
            pwd
            ls
            echo "App directory does not exist!"
          fi
          # Navigate to the app directory
          cd $APP_DIR || exit
          # Check if the script exists before attempting to run it
          if [ -f "verify_and_cleanup.sh" ]; then
            chmod +x verify_and_cleanup.sh
            ./verify_and_cleanup.sh
          else
            echo "Script verify_and_cleanup.sh not found!"
            exit 1
          fi
          # Check if Docker and Docker Compose are installed
          if ! command -v docker &> /dev/null; then
            echo "Docker is not installed."
            exit 1
          fi
          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose is not installed."
            exit 1
          fi
          # Run Docker Compose
          sudo docker-compose up -d
        EOF
